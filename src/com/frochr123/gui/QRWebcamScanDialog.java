/**
 * This file is part of VisiCut.
 * Copyright (C) 2011 - 2013 Thomas Oster <thomas.oster@rwth-aachen.de>
 * RWTH Aachen University - 52062 Aachen, Germany
 *
 *     VisiCut is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU Lesser General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     VisiCut is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU Lesser General Public License for more details.
 *
 *     You should have received a copy of the GNU Lesser General Public License
 *     along with VisiCut.  If not, see <http://www.gnu.org/licenses/>.
 **/
package com.frochr123.gui;

import com.frochr123.helper.CachedFileDownloader;
import com.frochr123.helper.QRCodeInfo;
import com.t_oster.visicut.gui.MainView;
import com.tur0kk.TakePhotoThread;
import com.frochr123.qrcodescan.QRCodeScanner;
import com.frochr123.qrcodescan.QRCodeScannerResult;
import com.t_oster.visicut.VisicutModel;
import com.t_oster.visicut.managers.MappingManager;
import com.t_oster.visicut.managers.PreferencesManager;
import com.t_oster.visicut.model.PlfFile;
import com.t_oster.visicut.model.PlfPart;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.List;
import java.util.Observer;
import java.util.Observable;
import javax.swing.JDialog;

import java.util.AbstractMap.SimpleEntry;
import java.util.LinkedList;
import java.util.ResourceBundle;

/**
 * QRWebcamScanDialog.java: Scanning QR codes and loading files from URLs in QR codes
 * Supports arbitrary URLs, but is mainly supposed to support FabQR URLs
 * @author Christian
 */
public class QRWebcamScanDialog extends JDialog implements Observer
{
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblLoading;
    private javax.swing.JLabel lblPhoto;
    private javax.swing.JPanel pnlFoto;
    // End of variables declaration//GEN-END:variables

  // Variables
  private TakePhotoThread cameraThread = null;
  private QRCodeScanner qrCodeScanner = null;
  private ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/frochr123/gui/resources/QRWebcamScanDialog");

  // Constructor
  public QRWebcamScanDialog(java.awt.Frame parent, boolean modal)
  {
    // Call constructor of super class JDialog
    super(parent, modal);
    
    // Initialization
    initComponents();
    this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
    initWindowListener();
    
    // Start camera automatically on dialog initialization, abort on error
    if (!setupCamera())
    {
      return;
    }

    // Setup QR code scanner
    qrCodeScanner = new QRCodeScanner(lblPhoto, false, false, 50);
    qrCodeScanner.addObserver(this);
    qrCodeScanner.startOrContinueScan();
  }

  // Function for drawing dialog elements
  // Generated by Form Editor
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFoto = new javax.swing.JPanel();
        lblPhoto = new javax.swing.JLabel();
        lblLoading = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N
        setResizable(false);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(com.t_oster.visicut.gui.VisicutApp.class).getContext().getResourceMap(QRWebcamScanDialog.class);
        pnlFoto.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("pnlFoto.border.lineColor"))); // NOI18N
        pnlFoto.setName("pnlFoto"); // NOI18N

        lblPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblPhoto.setText(resourceMap.getString("lblPhoto.text")); // NOI18N
        lblPhoto.setBorder(javax.swing.BorderFactory.createLineBorder(resourceMap.getColor("lblPhoto.border.lineColor"))); // NOI18N
        lblPhoto.setName("lblPhoto"); // NOI18N

        lblLoading.setIcon(com.frochr123.icons.IconLoader.loadIcon(com.frochr123.icons.IconLoader.ICON_LOADING_CIRCLE_SMALL));
        lblLoading.setText(resourceMap.getString("lblLoading.text")); // NOI18N
        lblLoading.setName("lblLoading"); // NOI18N

        javax.swing.GroupLayout pnlFotoLayout = new javax.swing.GroupLayout(pnlFoto);
        pnlFoto.setLayout(pnlFotoLayout);
        pnlFotoLayout.setHorizontalGroup(
            pnlFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFotoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(lblLoading, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPhoto, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFotoLayout.setVerticalGroup(
            pnlFotoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFotoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addComponent(lblPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFoto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlFoto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  // Window listener to close camera thread on window close
  private void initWindowListener()
  {
    this.addWindowListener
    (
      new WindowListener()
      {
        public void windowClosing(WindowEvent e)
        {
          if (qrCodeScanner != null)
          {
            qrCodeScanner.interruptScan();
          }

          closeCamera();
        }

        public void windowOpened(WindowEvent e)
        {
        }

        public void windowClosed(WindowEvent e)
        {
        }

        public void windowIconified(WindowEvent e)
        {
        }

        public void windowDeiconified(WindowEvent e)
        {
        }

        public void windowActivated(WindowEvent e)
        {
        }

        public void windowDeactivated(WindowEvent e)
        {
        }
      }
    );
  }

  // Start camera thread to take pictures regularly
  // Deals with UI elements aswell
  private boolean setupCamera()
  {
    // Set loading texts
    lblLoading.setIcon(com.frochr123.icons.IconLoader.loadIcon(com.frochr123.icons.IconLoader.ICON_LOADING_CIRCLE_SMALL));
    lblLoading.setText(bundle.getString("LOADING_CAMERA"));
    lblPhoto.setIcon(null);

    // Checks for available cameras
    if (!TakePhotoThread.isWebCamDetected())
    {
      // No webcam detected, show error message and abort
      lblLoading.setIcon(null);
      lblLoading.setText(bundle.getString("ERROR_NO_WEBCAM"));
      lblPhoto.setIcon(null);
      return false;
    }

    // Check for not running QR code detection in preview panel
    if (MainView.getInstance() != null && MainView.getInstance().isEditGuiForQRCodesDisabled())
    {
      // QR code editing in main window in progress, show error and abort
      lblLoading.setIcon(null);
      lblLoading.setText(bundle.getString("ERROR_PREVIEW_QR_CODE_EDITING_ACTIVE"));
      lblPhoto.setIcon(null);
      return false;
    }
    
    // Check for laser cutting in main window in progress, show error and abort
    if (MainView.getInstance() != null && MainView.getInstance().isLaserJobInProgress())
    {
      // Laser cutting in main window in progress, show error and abort
      lblLoading.setIcon(null);
      lblLoading.setText(bundle.getString("ERROR_LASER_CUTTING_ACTIVE"));
      lblPhoto.setIcon(null);
      return false;
    }

    // Show success message for starting camera
    lblLoading.setText(bundle.getString("SCANNING_QR_CODES"));

    // Start camera, second parameter determines webcam mode, use high resolution
    cameraThread = new TakePhotoThread(lblPhoto, true, TakePhotoThread.PHOTO_RESOLUTION_HIGH);
    cameraThread.start();
    return true;
  }

  // Stop camera thread and deal with clean-up of camera elements
  private void closeCamera()
  {
    if (cameraThread != null)
    {
      cameraThread.interrupt();
      cameraThread = null;
    }
  }
  
  // Observer function
  public void update(Observable obj, Object arg)
  {
    // Prepare variables
    int addedPartsCount = 0;
    int addedQRCodes = 0;

    // Check for valid input from QR code scanner, never null, empty list is NOT allowed to happen
    if (obj != null && arg != null && obj.equals(qrCodeScanner) && arg instanceof List)
    {
      // Iterate list, try to load elements
      List<QRCodeScannerResult> qrResults = (List<QRCodeScannerResult>)(arg);
      for (QRCodeScannerResult qrCode : qrResults)
      {
        // Check for not running QR code detection in preview panel
        if (MainView.getInstance() != null && MainView.getInstance().isEditGuiForQRCodesDisabled())
        {
          // QR code editing in main window in progress, show error and abort
          lblLoading.setIcon(null);
          lblLoading.setText(bundle.getString("ERROR_PREVIEW_QR_CODE_EDITING_ACTIVE"));
          lblPhoto.setIcon(null);
          closeCamera();
          return;
        }

        // Check for laser cutting in main window in progress, show error and abort
        if (MainView.getInstance() != null && MainView.getInstance().isLaserJobInProgress())
        {
          // Laser cutting in main window in progress, show error and abort
          lblLoading.setIcon(null);
          lblLoading.setText(bundle.getString("ERROR_LASER_CUTTING_ACTIVE"));
          lblPhoto.setIcon(null);
          closeCamera();
          return;
        }

        // Check valid pointer data
        if (qrCode == null || qrCode.getText() == null || qrCode.getText().isEmpty())
        {
          continue;
        }
        
        // QR code seems to be fine, begin downloading
        File file = null;
        String qrCodeText = qrCode.getText();

        try
        {
          SimpleEntry<String, SimpleEntry<String, File>> fileDownload = CachedFileDownloader.downloadFile(qrCodeText, CachedFileDownloader.CACHE_DOWNLOADER_DEFAULT_FILETYPES);

          if (fileDownload != null && fileDownload.getValue() != null && fileDownload.getValue().getValue() != null)
          {
            file = (File)(fileDownload.getValue().getValue());
          }
        }
        catch (Exception e)
        {
          // On exception show error dialog and continue with next QR code
          if (MainView.getInstance() != null && MainView.getInstance().getDialog() != null)
          {
            MainView.getInstance().getDialog().showOkCancelDialog(bundle.getString("ERROR_FILE_DOWNLOAD") + " (URL: " + qrCodeText + ")");
          }

          continue;
        }

        if (file == null)
        {
          // On file null show error dialog and continue with next QR code
          if (MainView.getInstance() != null && MainView.getInstance().getDialog() != null)
          {
            MainView.getInstance().getDialog().showOkCancelDialog(bundle.getString("ERROR_FILE_DOWNLOAD") + " (URL: " + qrCodeText + ")");
          }

          continue;
        }

        // Load QR code
        try
        {
          // Prepare variables
          LinkedList<PlfPart> addPlfParts = new LinkedList<PlfPart>();

          // Load PLF file
          if (VisicutModel.PLFFilter.accept(file))
          {
            // Not interested in warnings, but null pointers are not supported here
            LinkedList<String> warnings = new LinkedList<String>();
            PlfFile loadPlfFile = VisicutModel.getInstance().loadPlfFile(MappingManager.getInstance(), file, warnings);

            if (loadPlfFile != null)
            {
              if (!loadPlfFile.isEmpty())
              {
                addedQRCodes++;

                for (PlfPart p : loadPlfFile)
                {
                  if (p != null)
                  {
                    // No need to remove mapping, single QR code loading does not need to be fast
                    addPlfParts.add(p);
                  }
                }
              }
            }
          }
          // Load other file type
          else
          {
            // Not interested in warnings, but null pointers are not supported here
            LinkedList<String> warnings = new LinkedList<String>();
            PlfPart p = VisicutModel.getInstance().loadGraphicFile(file, warnings);
            addedQRCodes++;
            
            // Mapping can be loaded, single QR code loading does not need to be fast
            if (PreferencesManager.getInstance() != null && PreferencesManager.getInstance().getPreferences() != null
                && PreferencesManager.getInstance().getPreferences().getDefaultMapping() != null)
            {
              try
              {
                p.setMapping(MappingManager.getInstance().getItemByName(PreferencesManager.getInstance().getPreferences().getDefaultMapping()));
              }
              catch (Exception e)
              {
                // On maaping error show error dialog and continue with next QR code
                if (MainView.getInstance() != null && MainView.getInstance().getDialog() != null)
                {
                  addedQRCodes--;
                  MainView.getInstance().getDialog().showOkCancelDialog(bundle.getString("ERROR_LOADING_MAPPING"));
                }

                continue;
              }
            }

            addPlfParts.add(p);
          }

          // Add plf parts to current used plf file
          if (addPlfParts != null && !addPlfParts.isEmpty())
          {
            for (PlfPart plfPart : addPlfParts)
            {
              if (plfPart != null)
              {
                if (MainView.getInstance() != null && !MainView.getInstance().isLaserJobInProgress())
                {
                  // Increase counter
                  addedPartsCount++;
                  
                  // Set QRCodeInfo to PlfPart
                  QRCodeInfo qrCodeInfo = new QRCodeInfo();
                  qrCodeInfo.setWebcamQRCodeSource(true);
                  qrCodeInfo.setQRCodeSourceURL(qrCodeText);
                  plfPart.setQRCodeInfo(qrCodeInfo);

                  // Add part to current Plf file
                  VisicutModel.getInstance().getPlfFile().add(plfPart);

                  if (VisicutModel.getInstance().getPropertyChangeSupport() != null)
                  {
                    VisicutModel.getInstance().getPropertyChangeSupport().firePropertyChange(VisicutModel.PROP_PLF_PART_ADDED, null, plfPart);
                  }
                }
              }
            }
          }
        }
        catch (Exception e)
        {
          // On exception show error dialog and continue with next QR code
          if (MainView.getInstance() != null && MainView.getInstance().getDialog() != null)
          {
            MainView.getInstance().getDialog().showOkCancelDialog(bundle.getString("ERROR_LOADING_FILE"));
          }

          continue;
        }
      }
      
      // At least one part was loaded successfully, stop
      if (addedPartsCount > 0 && addedQRCodes > 0)
      {
        if (VisicutModel.getInstance() != null)
        {
          // Fit all objects into bed
          VisicutModel.getInstance().fitObjectsIntoBed();

          // Autoselect a new selected object
          VisicutModel.getInstance().setSelectedPart(null, true);
        }

        // Laser cutting in main window in progress, show error and abort
        lblLoading.setIcon(null);
        lblLoading.setText(bundle.getString("SUCCESS_QR_CODES_SCANNED") + ": " + (new Integer(addedQRCodes).toString()));
        closeCamera();
        return;
      }

      qrCodeScanner.startOrContinueScan();
    }
  }
}